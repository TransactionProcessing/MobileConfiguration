name: Release

on:
  release:
    types: [published]

jobs:
  buildlinux:
    name: "Release"
    env:
        ASPNETCORE_ENVIRONMENT: "Production"

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2.3.4

    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

    - name: Install NET 9
      uses: actions/setup-dotnet@v4.0.1
      with:
        dotnet-version: '9.0.x'

    - name: Restore Nuget Packages
      run: dotnet restore MobileConfiguration.sln --source ${{ secrets.PUBLICFEEDURL }} --source ${{ secrets.PRIVATEFEED_URL }}

    - name: Build Code
      run: dotnet build MobileConfiguration.sln --configuration Release

    #- name: Run Unit Tests
    #  run: |
    #    echo "ASPNETCORE_ENVIRONMENT are > ${ASPNETCORE_ENVIRONMENT}"
    #    dotnet test "TransactionProcessor.BusinessLogic.Tests\TransactionProcessor.BusinessLogic.Tests.csproj"       
        
    - name: Publish Images to Docker Hub - Pre Release
      if: ${{ github.event.release.prerelease == true }} 
      run: |
        docker build . --file MobileConfiguration/Dockerfile --tag stuartferguson/mobileconfiguration:dev
        docker login --username=${{ secrets.DOCKER_USERNAME }} --password=${{ secrets.DOCKER_PASSWORD }}
        docker push stuartferguson/mobileconfiguration:dev

    - name: Publish Images to Docker Hub - Formal Release
      if: ${{ github.event.release.prerelease == false }} 
      run: |
        docker build . --file MobileConfiguration/Dockerfile --tag stuartferguson/mobileconfiguration:latest
        docker login --username=${{ secrets.DOCKER_USERNAME }} --password=${{ secrets.DOCKER_PASSWORD }}
        docker push stuartferguson/mobileconfiguration:latest

    - name: Publish API
      if: ${{ github.event.release.prerelease == false }}
      run: dotnet publish "MobileConfiguration\MobileConfiguration.csproj" --configuration Release --output publishOutput -r win-x64 --self-contained
    
    - name: Build Release Package
      run: |
         cd /home/runner/work/MobileConfiguration/MobileConfiguration/publishOutput
         zip -r ../mobileconfiguration.zip ./*

    - name: Upload the artifact
      uses: actions/upload-artifact@v3
      with:
        name: mobileconfiguration
        path: mobileconfiguration.zip


    #- name: Build and Publish Nuget Packages
    #  if: ${{ github.event.release.prerelease == false }}
    #  run: |
    #    dotnet pack "TransactionProcessor.Client\TransactionProcessor.Client.csproj" /p:PackageVersion=${{ steps.get_version.outputs.VERSION }} --output Nugets
    #    dotnet nuget push Nugets/TransactionProcessor.Client.${{ steps.get_version.outputs.VERSION }}.nupkg --api-key ${{ secrets.MYGET_APIKEY }} --source https://www.myget.org/F/transactionprocessing/api/v2/package

  deploystaging:
    runs-on: stagingserver
    needs: buildlinux
    environment: staging
    name: "Deploy to Staging"
    
    steps:
      - name: Download the artifact
        uses: actions/download-artifact@v3
        with:
          name: mobileconfiguration

      - name: Remove existing  Windows service
        run: |
          $serviceName = "Transaction Processing - Mobile Configuration"
          # Check if the service exists
          if (Get-Service -Name $serviceName -ErrorAction SilentlyContinue) {
            Stop-Service -Name $serviceName
            sc.exe delete $serviceName
          }

      - name: Unzip the files
        run: |
          Expand-Archive -Path mobileconfiguration.zip -DestinationPath "C:\txnproc\transactionprocessing\mobileconfiguration" -Force
      
      - name: Install as a Windows service
        run: |
          $serviceName = "Transaction Processing - Mobile Configuration"
          $servicePath = "C:\txnproc\transactionprocessing\mobileconfiguration\MobileConfiguration.exe"
                   
          New-Service -Name $serviceName -BinaryPathName $servicePath -Description "Transaction Processing - Mobile Configuration" -DisplayName "Transaction Processing - Mobile Configuration" -StartupType Automatic
          Start-Service -Name $serviceName          

  deployproduction:
    runs-on: productionserver
    needs: [buildlinux, deploystaging]
    environment: production
    name: "Deploy to Production"
    
    steps:
      - name: Download the artifact
        uses: actions/download-artifact@v3
        with:
          name: mobileconfiguration

      - name: Remove existing  Windows service
        run: |
          $serviceName = "Transaction Processing - Mobile Configuration"
          # Check if the service exists
          if (Get-Service -Name $serviceName -ErrorAction SilentlyContinue) {
            Stop-Service -Name $serviceName
            sc.exe delete $serviceName
          }

      - name: Unzip the files
        run: |
          Expand-Archive -Path mobileconfiguration.zip -DestinationPath "C:\txnproc\transactionprocessing\mobileconfiguration" -Force
      
      - name: Install as a Windows service
        run: |
          $serviceName = "Transaction Processing - Mobile Configuration"
          $servicePath = "C:\txnproc\transactionprocessing\mobileconfiguration\MobileConfiguration.exe"
                   
          New-Service -Name $serviceName -BinaryPathName $servicePath -Description "Transaction Processing - Mobile Configuration" -DisplayName "Transaction Processing - Mobile Configuration" -StartupType Automatic
          Start-Service -Name $serviceName          
